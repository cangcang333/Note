
# This is about socket note


/usr/include/netinet/in.h


/* Structure describing and Internet socket address */
struct sockaddr_in
{
    __SOCKADDR_COMMON (sin_);
    in_port_t sin_port;        /* Port number */
    struct in_addr sin_addr;   /* Internet address */

    /* Pad to size of `struct sockaddr` */
    unsigned char sin_zero[sizeof(struct sockaddr) - 
                          __SOCKADDR_COMMON_SIZE - 
                          sizeof(in_port_t) - 
                          sizeof(struct in_addr)];
};

/* Internet address */
struct in_addr
{
    in_addr_t s_addr;
};


/usr/include/bits/sockaddr.h

/* POSIX.1g specifies this type name for the `sa_family` member */
typedef unsigned short int sa_family_t;

/* This macro is used to declare the initial common members
 * of the data types used for socket addresses, `struct sockaddr`,
 * `struct sockaddr_in`, `struct sockaddr_un`, etc. */

#define __SOCKADDR_COMMON(sa_prefix) \
        sa_family_t sa_prefix##family

#define __SOCKADDR_COMMON_SIZE  (sizeof(unsigned short int))



/usr/include/bits/socket.h

/* Structure describing a generic socket address */
struct sockaddr
{
    __SOCKADDR_COMMON(sa_);    /* Common data: address family and length */
    char sa_data[14];          /* Address data */
};



About the preprocessor work with # and ## 
    A single '#' will create a string from the given argument, regardless of 
    what that argument contains; while the double '##' will create a new 
    token by concatenating the arguments.




/usr/include/bits/time.h

/* A time value that is accurate to the nearest
   microsecond but also has a range of years. */
struct timeval
{
    __time_t tv_sec;        /* Seconds */
    __suseconds_t tv_usec;  /* Microseconds */
};

tv_sec    %ld
tv_usec   %d


/usr/include/netdb.h

/* Structure to contain information about address of a service provider */
struct addrinfo
{
    int ai_flags;                /* Input flags */
    int ai_family;               /* Protocol family for socket */
    int ai_socktype;             /* Socket type */
    int ai_protocol;             /* Protocol for socket */
    socklen_t ai_addrlen;        /* Length of socket address */
    struct sockaddr *ai_addr;    /* Socket address for socket */
    char *ai_canonname;          /* Canonical name for service location */
    struct addrinfo *ai_next;    /* Pointer to next in list */
};










